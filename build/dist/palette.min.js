!(function(t, e) {
  if ('object' == typeof exports && 'object' == typeof module)
    module.exports = e();
  else if ('function' == typeof define && define.amd) define([], e);
  else {
    var i = e();
    for (var s in i) ('object' == typeof exports ? exports : t)[s] = i[s];
  }
})(window, function() {
  return (function(t) {
    var e = {};
    function i(s) {
      if (e[s]) return e[s].exports;
      var o = (e[s] = { i: s, l: !1, exports: {} });
      return t[s].call(o.exports, o, o.exports, i), (o.l = !0), o.exports;
    }
    return (
      (i.m = t),
      (i.c = e),
      (i.d = function(t, e, s) {
        i.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: s });
      }),
      (i.r = function(t) {
        'undefined' != typeof Symbol &&
          Symbol.toStringTag &&
          Object.defineProperty(t, Symbol.toStringTag, { value: 'Module' }),
          Object.defineProperty(t, '__esModule', { value: !0 });
      }),
      (i.t = function(t, e) {
        if ((1 & e && (t = i(t)), 8 & e)) return t;
        if (4 & e && 'object' == typeof t && t && t.__esModule) return t;
        var s = Object.create(null);
        if (
          (i.r(s),
          Object.defineProperty(s, 'default', { enumerable: !0, value: t }),
          2 & e && 'string' != typeof t)
        )
          for (var o in t)
            i.d(
              s,
              o,
              function(e) {
                return t[e];
              }.bind(null, o)
            );
        return s;
      }),
      (i.n = function(t) {
        var e =
          t && t.__esModule
            ? function() {
                return t.default;
              }
            : function() {
                return t;
              };
        return i.d(e, 'a', e), e;
      }),
      (i.o = function(t, e) {
        return Object.prototype.hasOwnProperty.call(t, e);
      }),
      (i.p = '/dist/'),
      i((i.s = 2))
    );
  })([
    function(t, e, i) {},
    function(t, e, i) {
      'use strict';
      var s = i(0);
      i.n(s).a;
    },
    function(t, e, i) {
      'use strict';
      i.r(e),
        Element.prototype.matches ||
          (Element.prototype.matches =
            Element.prototype.msMatchesSelector ||
            Element.prototype.webkitMatchesSelector),
        Element.prototype.closest ||
          (Element.prototype.closest = function(t) {
            var e = this;
            do {
              if (e.matches(t)) return e;
              e = e.parentElement || e.parentNode;
            } while (null !== e && 1 === e.nodeType);
            return null;
          });
      var s = !1;
      function o() {}
      try {
        var n = Object.defineProperty({}, 'passive', {
          get: function() {
            return (s = !0), !0;
          }
        });
        window.addEventListener('testPassive', o, n),
          window.removeEventListener('testPassive', o, n);
      } catch (t) {
        s = !1;
      }
      function r(t) {
        return t.scrollTop <= 0;
      }
      function a(t) {
        return t.scrollHeight - t.scrollTop <= t.clientHeight;
      }
      function h(t, e, i) {
        if (!i) return !0;
        var s = t.clientX - e.clientX,
          o = t.clientY - e.clientY;
        return Math.abs(s) < Math.abs(o);
      }
      function c(t) {
        return (function(t, e, i, s) {
          var o = t[e];
          return (
            !(t[i] <= o) &&
            -1 === ['hidden', 'visible'].indexOf(getComputedStyle(t)[s])
          );
        })(t, 'clientWidth', 'scrollWidth', 'overflowX');
      }
      var l = !1,
        p = null,
        u = null,
        d = !1,
        y = !1;
      function f() {
        (l = !1), (p = null), (u = null), (d = !1), (y = !1);
      }
      function g(t) {
        var e = document.createElement('style');
        (e.type = 'text/css'),
          e.setAttribute('data-prevent-scroll', 'true'),
          (e.innerText = ''.concat(
            t,
            ' { -webkit-overflow-scrolling: touch; }'
          )),
          document.head.appendChild(e);
      }
      var v = function() {
          var t =
              arguments.length > 0 && void 0 !== arguments[0]
                ? arguments[0]
                : {},
            e = t.ignore,
            i = void 0 === e ? '.scrollable' : e;
          function o(t) {
            if ('string' == typeof i) {
              (u = t.target.closest(i)) && (y = c(u));
              var e = t.touches[0],
                s = e.clientX,
                o = e.clientY;
              p = { clientX: s, clientY: o };
            }
            d = t.target.closest('#__vconsole');
          }
          function n(t) {
            if (!d) {
              if ('string' == typeof i) {
                var e = t.touches[0],
                  s = !0;
                if (
                  (u
                    ? ((e.clientY < p.clientY && h(e, p, y) && a(u)) ||
                        (e.clientY > p.clientY && h(e, p, y) && r(u))) &&
                      (s = !1)
                    : (s = !1),
                  (p = { clientX: e.clientX, clientY: e.clientY }),
                  s)
                )
                  return;
              }
              ('function' == typeof i && i(t.target)) ||
                (t.cancelable && t.preventDefault());
            }
          }
          function v() {
            (u = null), (d = !1);
          }
          (l = !0), g(i);
          var m = !!s && { passive: !1 };
          function w() {
            f(),
              window.removeEventListener('touchstart', o, m),
              window.removeEventListener('touchmove', n, m),
              window.removeEventListener('touchend', v, m);
          }
          return (
            l && w(),
            window.addEventListener('touchstart', o, m),
            window.addEventListener('touchmove', n, m),
            window.addEventListener('touchend', v, m),
            { cancel: w }
          );
        },
        m = function() {
          var t = this,
            e = t.$createElement,
            i = t._self._c || e;
          return i('div', { staticClass: 'palette' }, [
            i('p', { staticClass: 'palette_tip' }, [
              t._v('\n    ' + t._s(t.paletteStyleCopy.title) + '\n    '),
              i(
                'button',
                {
                  staticClass: 'tip_btn',
                  style:
                    'background-color:' + t.paletteStyleCopy.borderColor + ';',
                  attrs: { type: 'button' },
                  on: { click: t.showBar }
                },
                [t._v('\n      编辑面板\n    ')]
              )
            ]),
            t._v(' '),
            i(
              'div',
              {
                ref: 'palette_wrapper',
                staticClass: 'palette_wrapper',
                style:
                  'width:' +
                  t.paletteStyleCopy.width +
                  'px;height:' +
                  t.paletteStyleCopy.height +
                  'px;border:' +
                  t.paletteStyleCopy.borderStyle +
                  ' ' +
                  t.paletteStyleCopy.borderWidth +
                  'px ' +
                  t.paletteStyleCopy.borderColor +
                  ';'
              },
              [
                t.isEraser
                  ? i('div', {
                      ref: 'eraser',
                      staticClass: 'eraser',
                      style:
                        'width:' +
                        t.eraserOptions.size +
                        'px;height:' +
                        t.eraserOptions.size +
                        'px;background-color:' +
                        t.eraserOptions.backgroundColor +
                        ';' +
                        (t.eraserOptions.isRect ? '' : 'border-radius:50%;'),
                      on: {
                        touchstart: function(e) {
                          return e.stopPropagation(), t.startPoint(e);
                        },
                        touchmove: function(t) {
                          t.stopPropagation();
                        },
                        touchend: function(e) {
                          return e.stopPropagation(), t.endPoint(e);
                        },
                        mousedown: function(e) {
                          return e.stopPropagation(), t.startPoint(e);
                        },
                        mousemove: function(t) {
                          t.stopPropagation();
                        },
                        mouseup: function(e) {
                          return e.stopPropagation(), t.endPoint(e);
                        }
                      }
                    })
                  : t._e(),
                t._v(' '),
                i(
                  'div',
                  {
                    directives: [
                      {
                        name: 'show',
                        rawName: 'v-show',
                        value: 'PaintCircle' == t.touchType && t.isEdit,
                        expression: "touchType == 'PaintCircle' && isEdit"
                      }
                    ],
                    ref: 'circle',
                    staticClass: 'circle'
                  },
                  [
                    i(
                      'span',
                      {
                        on: {
                          click: t.closeEdit,
                          touchstart: function(t) {
                            t.stopPropagation();
                          },
                          touchend: function(t) {
                            t.stopPropagation();
                          },
                          mousedown: function(t) {
                            t.stopPropagation();
                          },
                          mouseup: function(t) {
                            t.stopPropagation();
                          }
                        }
                      },
                      [t._v('\n        ×\n      ')]
                    )
                  ]
                ),
                t._v(' '),
                i(
                  'div',
                  {
                    directives: [
                      {
                        name: 'show',
                        rawName: 'v-show',
                        value: 'PaintRectangle' == t.touchType && t.isEdit,
                        expression: "touchType == 'PaintRectangle' && isEdit"
                      }
                    ],
                    ref: 'rectangle',
                    staticClass: 'rectangle'
                  },
                  [
                    i(
                      'span',
                      {
                        on: {
                          click: t.closeEdit,
                          touchstart: function(t) {
                            t.stopPropagation();
                          },
                          touchend: function(t) {
                            t.stopPropagation();
                          },
                          mousedown: function(t) {
                            t.stopPropagation();
                          },
                          mouseup: function(t) {
                            t.stopPropagation();
                          }
                        }
                      },
                      [t._v('\n        ×\n      ')]
                    )
                  ]
                ),
                t._v(' '),
                i('canvas', {
                  ref: 'palette',
                  attrs: {
                    width:
                      t.paletteStyleCopy.width -
                      2 * t.paletteStyleCopy.borderWidth,
                    height:
                      t.paletteStyleCopy.height -
                      2 * t.paletteStyleCopy.borderWidth
                  }
                })
              ]
            ),
            t._v(' '),
            i('div', { ref: 'historyBar', staticClass: 'historyBar' }, [
              i(
                'div',
                {
                  staticClass: 'historyBar_close',
                  on: { click: t.showHistory }
                },
                [t._v('×')]
              ),
              t._v(' '),
              i('p', { staticClass: 'historyBar_title' }, [
                t._v('所有操作记录')
              ]),
              t._v(' '),
              i(
                'div',
                { staticClass: 'history_wrapper scrollable' },
                t._l(t.history, function(e, s) {
                  return i(
                    'div',
                    {
                      key: s,
                      staticClass: 'history_item',
                      on: {
                        click: function(e) {
                          return t.goHistory(s);
                        }
                      }
                    },
                    [
                      t._v(
                        '\n        ' + t._s(e.time) + t._s(e.text) + '\n      '
                      )
                    ]
                  );
                }),
                0
              ),
              t._v(' '),
              i('div', { staticClass: 'more' })
            ]),
            t._v(' '),
            i('div', { ref: 'showBar', staticClass: 'showBar' }, [
              i(
                'div',
                { staticClass: 'showBar_close', on: { click: t.showBar } },
                [t._v('×')]
              ),
              t._v(' '),
              i('p', { staticClass: 'showBar_title' }, [
                t._v('当前画笔状态：' + t._s(t.currentStatus))
              ]),
              t._v(' '),
              i('div', { staticClass: 'showBar_wrapper scrollable' }, [
                i('div', { staticClass: 'showBar_item' }, [
                  i(
                    'button',
                    { attrs: { type: 'button' }, on: { click: t.prevPaint } },
                    [t._v('\n          回撤\n        ')]
                  ),
                  t._v(' '),
                  i(
                    'button',
                    { attrs: { type: 'button' }, on: { click: t.nextPaint } },
                    [t._v('\n          前进\n        ')]
                  ),
                  t._v(' '),
                  i(
                    'span',
                    {
                      staticStyle: { 'font-size': '14px' },
                      on: { click: t.showHistory }
                    },
                    [
                      t._v(
                        '\n          共有' +
                          t._s(t.history.length) +
                          '条记录，当前第' +
                          t._s(t.currectHistory + 1) +
                          '条\n          '
                      ),
                      i('span', { staticStyle: { color: '#fed640' } }, [
                        t._v('>>')
                      ])
                    ]
                  )
                ]),
                t._v(' '),
                t.showbarOptionCopy.clearBtn
                  ? i('div', { staticClass: 'showBar_item' }, [
                      i(
                        'button',
                        {
                          attrs: { type: 'button' },
                          on: { click: t.clearPalette }
                        },
                        [t._v('\n          清除\n        ')]
                      ),
                      t._v(' '),
                      i('span', [t._v('当前清理次数' + t._s(t.clearTimes))])
                    ])
                  : t._e(),
                t._v(' '),
                i('div', { staticClass: 'showBar_item' }, [
                  i(
                    'button',
                    { attrs: { type: 'button' }, on: { click: t.paintRandom } },
                    [t._v('\n          普通画笔\n        ')]
                  )
                ]),
                t._v(' '),
                t.showbarOptionCopy.lineBtn
                  ? i('div', { staticClass: 'showBar_item' }, [
                      i(
                        'button',
                        {
                          attrs: { type: 'button' },
                          on: { click: t.paintLine }
                        },
                        [t._v('\n          直线画笔\n        ')]
                      )
                    ])
                  : t._e(),
                t._v(' '),
                t.showbarOptionCopy.hollowIrregularPolygonBtn
                  ? i('div', { staticClass: 'showBar_item' }, [
                      i(
                        'button',
                        {
                          attrs: { type: 'button' },
                          on: {
                            click: function(e) {
                              return t.paintIrregularPolygon('Hollow');
                            }
                          }
                        },
                        [t._v('\n          空心不规则多边形画笔\n        ')]
                      )
                    ])
                  : t._e(),
                t._v(' '),
                t.showbarOptionCopy.solidIrregularPolygonBtn
                  ? i('div', { staticClass: 'showBar_item' }, [
                      i(
                        'button',
                        {
                          attrs: { type: 'button' },
                          on: {
                            click: function(e) {
                              return t.paintIrregularPolygon('Solid');
                            }
                          }
                        },
                        [t._v('\n          实心不规则多边形画笔\n        ')]
                      )
                    ])
                  : t._e(),
                t._v(' '),
                t.showbarOptionCopy.paintCircleBtn
                  ? i('div', { staticClass: 'showBar_item' }, [
                      i(
                        'button',
                        {
                          attrs: { type: 'button' },
                          on: { click: t.paintCircle }
                        },
                        [t._v('\n          圆形画笔\n        ')]
                      )
                    ])
                  : t._e(),
                t._v(' '),
                t.showbarOptionCopy.paintRectangleBtn
                  ? i('div', { staticClass: 'showBar_item' }, [
                      i(
                        'button',
                        {
                          attrs: { type: 'button' },
                          on: { click: t.paintRectangle }
                        },
                        [t._v('\n          矩形画笔\n        ')]
                      )
                    ])
                  : t._e(),
                t._v(' '),
                t.showbarOptionCopy.paintTextBtn
                  ? i('div', { staticClass: 'showBar_item' }, [
                      i(
                        'button',
                        {
                          attrs: { type: 'button' },
                          on: { click: t.paintText }
                        },
                        [t._v('\n          插入文字\n        ')]
                      )
                    ])
                  : t._e(),
                t._v(' '),
                t.showbarOptionCopy.eraserBtn
                  ? i('div', { staticClass: 'showBar_item' }, [
                      i(
                        'button',
                        {
                          attrs: { type: 'button' },
                          on: { click: t.showEraser }
                        },
                        [t._v('\n          橡皮擦\n        ')]
                      )
                    ])
                  : t._e(),
                t._v(' '),
                t.showbarOptionCopy.saveBtn.isShow
                  ? i('div', { staticClass: 'showBar_item' }, [
                      t.showbarOptionCopy.saveBtn.isShow
                        ? i(
                            'button',
                            {
                              attrs: { type: 'button' },
                              on: {
                                click: function(e) {
                                  return t.savePalette(
                                    t.showbarOptionCopy.saveBtn.imageType
                                  );
                                }
                              }
                            },
                            [t._v('\n          生成图片\n        ')]
                          )
                        : t._e()
                    ])
                  : t._e()
              ])
            ]),
            t._v(' '),
            t.lastBase64
              ? i(
                  'div',
                  {
                    staticClass: 'images',
                    on: {
                      click: function(e) {
                        return e.target !== e.currentTarget
                          ? null
                          : t.closeImage(e);
                      }
                    }
                  },
                  [i('img', { ref: 'resultImg', attrs: { src: t.lastBase64 } })]
                )
              : t._e()
          ]);
        };
      m._withStripped = !0;
      var w =
          void 0 === document.body.style.transform
            ? '-webkit-transform'
            : 'transform',
        x = {
          name: 'palette',
          props: {
            point: { type: String, default: '' },
            showbarOption: {
              type: Object,
              default: function() {
                return {};
              }
            },
            paletteStyle: {
              type: Object,
              default: function() {
                return {};
              }
            },
            eraserOption: {
              type: Object,
              default: function() {
                return {};
              }
            }
          },
          data: function() {
            return {
              paletteStyleCopy: {
                title: "Nangxi's drawing board",
                width: document.body.clientWidth - 20,
                height: document.body.clientHeight - 75,
                backgroundColor: 'white',
                borderStyle: 'solid',
                borderColor: '#fed640',
                borderWidth: 5,
                defaultColor: 'black',
                defaultLineWidth: 2
              },
              showbarOptionCopy: {
                clearBtn: !0,
                saveBtn: { isShow: !0, imageType: 'png' },
                lineBtn: !0,
                hollowIrregularPolygonBtn: !0,
                solidIrregularPolygonBtn: !0,
                paintCircleBtn: !0,
                paintRectangleBtn: !0,
                eraserBtn: !0
              },
              cans: null,
              ctx: null,
              currentStatus: '普通画笔',
              touchType: 'Random',
              preCurrentStatus: '',
              preTouchType: '',
              startNew: null,
              startOld: [],
              move: {},
              endPoints: [],
              circle: null,
              rectangle: null,
              text: null,
              isEdit: !1,
              isEditing: !1,
              isEraser: !1,
              eraserOptions: { size: 20, backgroundColor: 'black', isRect: !1 },
              isHistory: !1,
              history: [],
              historyTextArr: [
                { operation: 'Random', text: '画了一条不规则线' },
                { operation: 'PaintCircle', text: '画了一个圆' },
                { operation: 'PaintRectangle', text: '画了一个矩形' },
                { operation: 'PaintText', text: '插入文本' },
                { operation: 'Eraser', text: '擦除画板' }
              ],
              currectHistory: -1,
              isShowBar: !1,
              clearTimes: 0,
              lastBase64: ''
            };
          },
          mounted: function() {
            Object.assign(this.paletteStyleCopy, this.paletteStyle),
              Object.assign(this.showbarOptionCopy, this.showbarOption),
              Object.assign(this.eraserOptions, this.eraserOption),
              this.init();
          },
          methods: {
            startPoint: function(t) {
              var e = t || window.event;
              (this.startNew = {
                x: e.clientX
                  ? e.clientX - this.$refs.palette.getBoundingClientRect().left
                  : e.targetTouches[0].clientX -
                    this.$refs.palette.getBoundingClientRect().left,
                y: e.clientY
                  ? e.clientY - this.$refs.palette.getBoundingClientRect().top
                  : e.targetTouches[0].clientY -
                    this.$refs.palette.getBoundingClientRect().top,
                isPaint: !1
              }),
                this.startOld.push(this.startNew),
                ('Random' != this.touchType && 'Eraser' != this.touchType) ||
                  (this.ctx.beginPath(),
                  (this.ctx.lineWidth = this.paletteStyleCopy.defaultLineWidth),
                  this.ctx.moveTo(this.startNew.x, this.startNew.y),
                  'Eraser' == this.touchType
                    ? ((this.ctx.lineWidth = this.eraserOptions.size),
                      (this.ctx.strokeStyle = this.paletteStyleCopy.backgroundColor))
                    : ((this.ctx.lineWidth = this.paletteStyleCopy.defaultLineWidth),
                      (this.ctx.strokeStyle = this.paletteStyleCopy.defaultColor))),
                'PaintCircle' != this.touchType ||
                  this.isEditing ||
                  ((this.circle.style[w] = 'translate3d('
                    .concat(this.startNew.x, 'px,')
                    .concat(this.startNew.y, 'px,0)')),
                  (this.isEdit = !0)),
                'PaintRectangle' != this.touchType ||
                  this.isEditing ||
                  ((this.isEdit = !0),
                  (this.rectangle.style[w] = 'translate3d('
                    .concat(this.startNew.x, 'px,')
                    .concat(this.startNew.y, 'px,0)'))),
                this.$refs.palette_wrapper.addEventListener(
                  'touchmove',
                  this.movePoint,
                  !1
                ),
                this.$refs.palette_wrapper.addEventListener(
                  'mousemove',
                  this.movePoint,
                  !1
                );
            },
            movePoint: function(t) {
              var e = t || window.event;
              if (
                ((this.startNew.x == this.move.x &&
                  this.startNew.y == this.move.y) ||
                  ((this.startOld[this.startOld.length - 1].isPaint = !0),
                  (this.move = {
                    x: e.clientX
                      ? e.clientX -
                        this.$refs.palette.getBoundingClientRect().left
                      : e.targetTouches[0].clientX -
                        this.$refs.palette.getBoundingClientRect().left,
                    y: e.clientY
                      ? e.clientY -
                        this.$refs.palette.getBoundingClientRect().top
                      : e.targetTouches[0].clientY -
                        this.$refs.palette.getBoundingClientRect().top
                  })),
                ('Random' != this.touchType && 'Eraser' != this.touchType) ||
                  ('Eraser' == this.touchType &&
                    (this.move.x <= this.$refs.eraser.offsetWidth / 2 &&
                      (this.move.x = this.$refs.eraser.offsetWidth / 2),
                    this.move.y <= this.$refs.eraser.offsetHeight / 2 &&
                      (this.move.y = this.$refs.eraser.offsetHeight / 2),
                    this.move.x >=
                      this.paletteStyleCopy.width -
                        2 * this.paletteStyleCopy.borderWidth -
                        this.$refs.eraser.offsetWidth / 2 &&
                      (this.move.x =
                        this.paletteStyleCopy.width -
                        2 * this.paletteStyleCopy.borderWidth -
                        this.$refs.eraser.offsetWidth / 2),
                    this.move.y >=
                      this.paletteStyleCopy.height -
                        2 * this.paletteStyleCopy.borderWidth -
                        this.$refs.eraser.offsetHeight / 2 &&
                      (this.move.y =
                        this.paletteStyleCopy.height -
                        2 * this.paletteStyleCopy.borderWidth -
                        this.$refs.eraser.offsetHeight / 2),
                    (this.$refs.eraser.style[w] = 'translate3d('
                      .concat(this.move.x - this.eraserOptions.size / 2, 'px,')
                      .concat(
                        this.move.y - this.eraserOptions.size / 2,
                        'px,0)'
                      ))),
                  this.ctx.lineTo(this.move.x, this.move.y),
                  this.ctx.stroke()),
                'PaintCircle' != this.touchType || this.isEditing)
              )
                'PaintCircle' == this.touchType &&
                  this.isEditing &&
                  (this.circle.style[w] = 'translate3d('
                    .concat(this.move.x - this.circle.offsetWidth / 2, 'px,')
                    .concat(
                      this.move.y - this.circle.offsetWidth / 2,
                      'px,0)'
                    ));
              else {
                var i =
                  Math.abs(this.startNew.x - this.move.x) >
                  Math.abs(this.startNew.y - this.move.y)
                    ? Math.abs(this.startNew.x - this.move.x)
                    : Math.abs(this.startNew.y - this.move.y);
                this.circle.style.cssText = ''
                  .concat(w, ':translate3d(')
                  .concat(this.startNew.x - i, 'px,')
                  .concat(this.startNew.y - i, 'px,0);width:')
                  .concat(2 * i, 'px;height:')
                  .concat(2 * i, 'px;');
              }
              'PaintRectangle' != this.touchType || this.isEditing
                ? 'PaintRectangle' == this.touchType &&
                  this.isEditing &&
                  (this.rectangle.style[w] = 'translate3d('
                    .concat(this.move.x - this.rectangle.offsetWidth, 'px,')
                    .concat(this.move.y - this.rectangle.offsetHeight, 'px,0)'))
                : ((this.rectangle.style.width = ''.concat(
                    Math.abs(this.startNew.x - this.move.x),
                    'px'
                  )),
                  (this.rectangle.style.height = ''.concat(
                    Math.abs(this.startNew.y - this.move.y),
                    'px'
                  )),
                  this.startNew.x - this.move.x <= 0
                    ? this.startNew.y - this.move.y > 0
                      ? ((this.rectangle.style[w] = 'translate3d('
                          .concat(this.startNew.x, 'px,')
                          .concat(this.move.y, 'px,0)')),
                        (this.rectangle.dataset.x = this.startNew.x),
                        (this.rectangle.dataset.y = this.move.y))
                      : ((this.rectangle.dataset.x = this.startNew.x),
                        (this.rectangle.dataset.y = this.startNew.y))
                    : this.startNew.y - this.move.y > 0
                    ? ((this.rectangle.style[w] = 'translate3d('
                        .concat(this.move.x, 'px,')
                        .concat(this.move.y, 'px,0)')),
                      (this.rectangle.dataset.x = this.move.x),
                      (this.rectangle.dataset.y = this.move.y))
                    : ((this.rectangle.style[w] = 'translate3d('
                        .concat(this.move.x, 'px,')
                        .concat(this.startNew.y, 'px,0)')),
                      (this.rectangle.dataset.x = this.move.x),
                      (this.rectangle.dataset.y = this.startNew.y)));
            },
            endPoint: function() {
              var t = this;
              if (
                ('Random' == this.touchType &&
                  this.startNew &&
                  (this.ctx.beginPath(),
                  (this.ctx.strokeStyle = this.paletteStyleCopy.defaultColor),
                  this.ctx.arc(
                    this.startNew.x,
                    this.startNew.y,
                    this.paletteStyleCopy.defaultLineWidth / 2,
                    0,
                    360,
                    !1
                  ),
                  (this.ctx.fillStyle = this.paletteStyleCopy.defaultColor),
                  this.ctx.fill()),
                'PaintCircle' == this.touchType &&
                  ((this.isEdit = !0), (this.isEditing = !0)),
                'PaintRectangle' == this.touchType &&
                  ((this.isEdit = !0), (this.isEditing = !0)),
                this.isEditing &&
                  (this.endPoints.length <= 1
                    ? (this.endPoints = [this.move, this.move])
                    : (this.endPoints.shift(), this.endPoints.push(this.move))),
                (this.startNew = null),
                this.$refs.palette_wrapper.removeEventListener(
                  'touchmove',
                  this.movePoint,
                  !1
                ),
                this.$refs.palette_wrapper.removeEventListener(
                  'mousemove',
                  this.movePoint,
                  !1
                ),
                'PaintCircle' !== this.touchType &&
                  'PaintRectangle' !== this.touchType)
              ) {
                this.currectHistory++;
                var e = new Date();
                this.currectHistory == this.history.length
                  ? this.history.push({
                      time: ''
                        .concat(
                          e.getHours() < 10 ? '0' + e.getHours() : e.getHours(),
                          ':'
                        )
                        .concat(
                          e.getMinutes() < 10
                            ? '0' + e.getMinutes()
                            : e.getMinutes(),
                          ':'
                        )
                        .concat(
                          e.getSeconds() < 10
                            ? '0' + e.getSeconds()
                            : e.getSeconds()
                        ),
                      text: this.historyTextArr.find(function(e) {
                        return e.operation == t.touchType;
                      }).text,
                      data: this.ctx.getImageData(
                        0,
                        0,
                        this.paletteStyleCopy.width -
                          2 * this.paletteStyleCopy.borderWidth,
                        this.paletteStyleCopy.height -
                          2 * this.paletteStyleCopy.borderWidth
                      )
                    })
                  : (this.history = this.history
                      .slice(this.currectHistory)
                      .push({
                        time: ''
                          .concat(
                            e.getHours() < 10
                              ? '0' + e.getHours()
                              : e.getHours(),
                            ':'
                          )
                          .concat(
                            e.getMinutes() < 10
                              ? '0' + e.getMinutes()
                              : e.getMinutes(),
                            ':'
                          )
                          .concat(
                            e.getSeconds() < 10
                              ? '0' + e.getSeconds()
                              : e.getSeconds()
                          ),
                        text: this.historyTextArr.find(function(e) {
                          return e.operation == t.touchType;
                        }).text,
                        data: this.ctx.getImageData(
                          0,
                          0,
                          this.paletteStyleCopy.width -
                            2 * this.paletteStyleCopy.borderWidth,
                          this.paletteStyleCopy.height -
                            2 * this.paletteStyleCopy.borderWidth
                        )
                      }));
              }
            },
            paintLine: function() {
              var t = this,
                e = this.startOld.filter(function(t) {
                  if (!t.isPaint) return t;
                });
              if (e.length < 2)
                return (
                  this.$emit(
                    'paintLine',
                    'You need at least two active points'
                  ),
                  void console.log('You need at least two active points')
                );
              e.forEach(function(e, i, s) {
                t.ctx.beginPath(),
                  i < s.length - 1
                    ? (t.ctx.moveTo(e.x, e.y),
                      t.ctx.lineTo(s[i + 1].x, s[i + 1].y))
                    : (t.startOld = []),
                  (e.isPaint = !0),
                  t.ctx.stroke();
              });
            },
            paintIrregularPolygon: function() {
              var t = this,
                e =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : 'Hollow',
                i = this.startOld.filter(function(t) {
                  if (!t.isPaint) return t;
                });
              if (i.length < 3)
                return (
                  this.$emit(
                    'paintLine',
                    'You need at least three active points'
                  ),
                  void console.log('You need at least three active points')
                );
              this.ctx.beginPath(),
                this.ctx.moveTo(i[0].x, i[0].y),
                (i[0].isPaint = !0),
                i.forEach(function(e, i, s) {
                  0 !== i && i < s.length
                    ? t.ctx.lineTo(e.x, e.y)
                    : (t.startOld = []),
                    (e.isPaint = !0);
                }),
                'Hollow' == e
                  ? (this.ctx.closePath(), this.ctx.stroke())
                  : this.ctx.fill();
            },
            initpaint: function() {
              this.isEdit && (this.startOld = []),
                (this.isEdit = !1),
                (this.isEditing = !1);
            },
            paintRandom: function() {
              (this.touchType = 'Random'),
                (this.currentStatus = '普通画笔'),
                this.initpaint();
            },
            paintCircle: function() {
              (this.touchType = 'PaintCircle'),
                (this.currentStatus = '圆形画笔'),
                this.initpaint();
            },
            paintRectangle: function() {
              (this.touchType = 'PaintRectangle'),
                (this.currentStatus = '矩形画笔'),
                this.initpaint();
            },
            paintText: function() {
              (this.touchType = 'PaintText'),
                (this.currentStatus = '文字画笔'),
                this.initpaint();
            },
            closeEdit: function() {
              var t = this;
              (this.isEdit = !1),
                (this.isEditing = !1),
                'PaintCircle' == this.touchType &&
                  (this.ctx.beginPath(),
                  (this.ctx.lineWidth = 1),
                  (this.ctx.strokeStyle = 'black'),
                  this.endPoints[0].x == this.endPoints[1].x &&
                  this.endPoints[0].y == this.endPoints[1].y
                    ? (this.ctx.arc(
                        this.startOld[this.startOld.length - 1].x,
                        this.startOld[this.startOld.length - 1].y,
                        this.circle.offsetWidth / 2,
                        0,
                        2 * Math.PI
                      ),
                      (this.startOld = []))
                    : this.ctx.arc(
                        this.move.x,
                        this.move.y,
                        this.circle.offsetWidth / 2,
                        0,
                        2 * Math.PI
                      ),
                  (this.endPoints = []),
                  this.ctx.stroke()),
                'PaintRectangle' == this.touchType &&
                  (this.ctx.beginPath(),
                  (this.ctx.lineWidth = 1),
                  (this.ctx.strokeStyle = 'black'),
                  this.endPoints[0].x == this.endPoints[1].x &&
                  this.endPoints[0].y == this.endPoints[1].y
                    ? this.ctx.rect(
                        this.rectangle.dataset.x,
                        this.rectangle.dataset.y,
                        this.rectangle.offsetWidth,
                        this.rectangle.offsetHeight
                      )
                    : this.ctx.rect(
                        this.move.x - this.rectangle.offsetWidth,
                        this.move.y - this.rectangle.offsetHeight,
                        this.rectangle.offsetWidth,
                        this.rectangle.offsetHeight
                      ),
                  (this.endPoints = []),
                  this.ctx.stroke()),
                (this.startNew = {}),
                this.currectHistory++;
              var e = new Date();
              this.currectHistory == this.history.length
                ? this.history.push({
                    time: ''
                      .concat(
                        e.getHours() < 10 ? '0' + e.getHours() : e.getHours(),
                        ':'
                      )
                      .concat(
                        e.getMinutes() < 10
                          ? '0' + e.getMinutes()
                          : e.getMinutes(),
                        ':'
                      )
                      .concat(
                        e.getSeconds() < 10
                          ? '0' + e.getSeconds()
                          : e.getSeconds()
                      ),
                    text: this.historyTextArr.find(function(e) {
                      return e.operation == t.touchType;
                    }).text,
                    data: this.ctx.getImageData(
                      0,
                      0,
                      this.paletteStyleCopy.width -
                        2 * this.paletteStyleCopy.borderWidth,
                      this.paletteStyleCopy.height -
                        2 * this.paletteStyleCopy.borderWidth
                    )
                  })
                : (this.history = this.history.slice(this.currectHistory).push({
                    time: ''
                      .concat(
                        e.getHours() < 10 ? '0' + e.getHours() : e.getHours(),
                        ':'
                      )
                      .concat(
                        e.getMinutes() < 10
                          ? '0' + e.getMinutes()
                          : e.getMinutes(),
                        ':'
                      )
                      .concat(
                        e.getSeconds() < 10
                          ? '0' + e.getSeconds()
                          : e.getSeconds()
                      ),
                    text: this.historyTextArr.find(function(e) {
                      return e.operation == t.touchType;
                    }).text,
                    data: this.ctx.getImageData(
                      0,
                      0,
                      this.paletteStyleCopy.width -
                        2 * this.paletteStyleCopy.borderWidth,
                      this.paletteStyleCopy.height -
                        2 * this.paletteStyleCopy.borderWidth
                    )
                  }));
            },
            showEraser: function() {
              (this.isEraser = !this.isEraser),
                this.isEraser
                  ? ((this.preCurrentStatus = this.currentStatus),
                    (this.preTouchType = this.touchType),
                    (this.currentStatus = '橡皮擦'),
                    (this.touchType = 'Eraser'))
                  : ((this.currentStatus = this.preCurrentStatus),
                    (this.touchType = this.preTouchType));
            },
            prevPaint: function() {
              this.currectHistory > 0
                ? (this.ctx.clearRect(
                    0,
                    0,
                    this.paletteStyleCopy.width -
                      2 * this.paletteStyleCopy.borderWidth,
                    this.paletteStyleCopy.height -
                      2 * this.paletteStyleCopy.borderWidth
                  ),
                  --this.currectHistory,
                  0 == this.currectHistory
                    ? this.ctx.putImageData(this.history[0].data, 0, 0)
                    : this.ctx.putImageData(
                        this.history[this.currectHistory].data,
                        0,
                        0
                      ))
                : (this.currectHistory = 0);
            },
            nextPaint: function() {
              this.currectHistory < this.history.length - 1
                ? (this.ctx.clearRect(
                    0,
                    0,
                    this.paletteStyleCopy.width -
                      2 * this.paletteStyleCopy.borderWidth,
                    this.paletteStyleCopy.height -
                      2 * this.paletteStyleCopy.borderWidth
                  ),
                  this.ctx.putImageData(
                    this.history[++this.currectHistory].data,
                    0,
                    0
                  ))
                : (this.currectHistory = this.history.length - 1);
            },
            goHistory: function(t) {
              this.ctx.clearRect(
                0,
                0,
                this.paletteStyleCopy.width -
                  2 * this.paletteStyleCopy.borderWidth,
                this.paletteStyleCopy.height -
                  2 * this.paletteStyleCopy.borderWidth
              ),
                this.ctx.putImageData(this.history[t].data, 0, 0),
                (this.currectHistory = t);
            },
            closeImage: function() {
              this.lastBase64 = '';
            },
            init: function() {
              (this.cans = this.$refs.palette),
                (this.circle = this.$refs.circle),
                (this.rectangle = this.$refs.rectangle),
                (this.ctx = this.$refs.palette.getContext('2d')),
                this.currectHistory++;
              var t = new Date();
              this.history.push({
                time: ''
                  .concat(
                    t.getHours() < 10 ? '0' + t.getHours() : t.getHours(),
                    ':'
                  )
                  .concat(
                    t.getMinutes() < 10 ? '0' + t.getMinutes() : t.getMinutes(),
                    ':'
                  )
                  .concat(
                    t.getSeconds() < 10 ? '0' + t.getSeconds() : t.getSeconds()
                  ),
                text: '创建画布',
                data: this.ctx.getImageData(
                  0,
                  0,
                  this.paletteStyleCopy.width -
                    2 * this.paletteStyleCopy.borderWidth,
                  this.paletteStyleCopy.height -
                    2 * this.paletteStyleCopy.borderWidth
                )
              }),
                this.$refs.palette_wrapper.addEventListener(
                  'touchstart',
                  this.startPoint,
                  !1
                ),
                this.$refs.palette_wrapper.addEventListener(
                  'mousedown',
                  this.startPoint,
                  !1
                ),
                this.$refs.palette_wrapper.addEventListener(
                  'touchend',
                  this.endPoint,
                  !1
                ),
                this.$refs.palette_wrapper.addEventListener(
                  'mouseup',
                  this.endPoint,
                  !1
                );
            },
            clearPalette: function() {
              this.clearTimes++,
                this.ctx.clearRect(
                  0,
                  0,
                  this.paletteStyleCopy.width -
                    2 * this.paletteStyleCopy.borderWidth,
                  this.paletteStyleCopy.height -
                    2 * this.paletteStyleCopy.borderWidth
                ),
                (this.startNew = null),
                (this.startOld = []),
                (this.history = []),
                (this.currectHistory = -1);
            },
            savePalette: function() {
              var t = this,
                e =
                  arguments.length > 0 && void 0 !== arguments[0]
                    ? arguments[0]
                    : 'png';
              'png' == e
                ? (this.lastBase64 = this.cans.toDataURL('image/png'))
                : 'jpeg' == e &&
                  (this.lastBase64 = this.cans.toDataURL('image/jpeg', 1)),
                this.$nextTick(function() {
                  var e = setTimeout(function() {
                    (t.$refs.resultImg.style[w] = 'translate3d(0,0,0)'),
                      clearTimeout(e);
                  }, 0);
                }),
                this.$emit('paletteImage', this.lastBase64);
            },
            showBar: function() {
              this.isShowBar
                ? ((this.$refs.showBar.style[w] = 'translate3d(0,110%,0)'),
                  (this.isShowBar = !1),
                  this.$refs.palette_wrapper.addEventListener(
                    'touchstart',
                    this.startPoint,
                    !1
                  ),
                  this.$refs.palette_wrapper.addEventListener(
                    'mousedown',
                    this.startPoint,
                    !1
                  ),
                  this.$refs.palette_wrapper.addEventListener(
                    'touchend',
                    this.endPoint,
                    !1
                  ),
                  this.$refs.palette_wrapper.addEventListener(
                    'mouseup',
                    this.endPoint,
                    !1
                  ))
                : ((this.$refs.showBar.style[w] = 'translate3d(0,0,0)'),
                  (this.isShowBar = !0),
                  this.$refs.palette_wrapper.removeEventListener(
                    'touchstart',
                    this.startPoint,
                    !1
                  ),
                  this.$refs.palette_wrapper.removeEventListener(
                    'mousedown',
                    this.startPoint,
                    !1
                  ),
                  this.$refs.palette_wrapper.removeEventListener(
                    'touchend',
                    this.endPoint,
                    !1
                  ),
                  this.$refs.palette_wrapper.removeEventListener(
                    'mouseup',
                    this.endPoint,
                    !1
                  ));
            },
            showHistory: function() {
              this.showBar(),
                this.isHistory
                  ? ((this.$refs.historyBar.style[w] = 'translate3d(100%,0,0)'),
                    (this.isHistory = !1))
                  : ((this.$refs.historyBar.style[w] = 'translate3d(0,0,0)'),
                    (this.isHistory = !0));
            }
          }
        };
      i(1);
      var C = (function(t, e, i, s, o, n, r, a) {
        var h,
          c = 'function' == typeof t ? t.options : t;
        if (
          (e && ((c.render = e), (c.staticRenderFns = i), (c._compiled = !0)),
          s && (c.functional = !0),
          n && (c._scopeId = 'data-v-' + n),
          r
            ? ((h = function(t) {
                (t =
                  t ||
                  (this.$vnode && this.$vnode.ssrContext) ||
                  (this.parent &&
                    this.parent.$vnode &&
                    this.parent.$vnode.ssrContext)) ||
                  'undefined' == typeof __VUE_SSR_CONTEXT__ ||
                  (t = __VUE_SSR_CONTEXT__),
                  o && o.call(this, t),
                  t &&
                    t._registeredComponents &&
                    t._registeredComponents.add(r);
              }),
              (c._ssrRegister = h))
            : o &&
              (h = a
                ? function() {
                    o.call(this, this.$root.$options.shadowRoot);
                  }
                : o),
          h)
        )
          if (c.functional) {
            c._injectStyles = h;
            var l = c.render;
            c.render = function(t, e) {
              return h.call(e), l(t, e);
            };
          } else {
            var p = c.beforeCreate;
            c.beforeCreate = p ? [].concat(p, h) : [h];
          }
        return { exports: t, options: c };
      })(x, m, [], !1, null, 'b1ebfdb0', null);
      C.options.__file = 'packages/palette/src/palette.vue';
      var b = C.exports;
      v();
      e.default = b;
    }
  ]);
});
//# sourceMappingURL=palette.min.js.map
